
distanceSensorTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000073a  000007ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b54  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079c  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051a  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b3  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000052e  00000000  00000000  00002613  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <main>
  8e:	0c 94 9b 03 	jmp	0x736	; 0x736 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ledDisplay>:
		}
	}
}

void ledDisplay(float occupancy)
{
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
	float occPercent = 0;	//occupancy percentage
	const int maxOcc = 50;	//max occupancy
	
	occPercent = (occupancy / maxOcc);
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	48 e4       	ldi	r20, 0x48	; 72
  a4:	52 e4       	ldi	r21, 0x42	; 66
  a6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__divsf3>
  aa:	6b 01       	movw	r12, r22
  ac:	7c 01       	movw	r14, r24
	if (occPercent < .40) // <40% occupancy
  ae:	2d ec       	ldi	r18, 0xCD	; 205
  b0:	3c ec       	ldi	r19, 0xCC	; 204
  b2:	4c ec       	ldi	r20, 0xCC	; 204
  b4:	5e e3       	ldi	r21, 0x3E	; 62
  b6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__cmpsf2>
  ba:	88 23       	and	r24, r24
  bc:	54 f4       	brge	.+20     	; 0xd2 <ledDisplay+0x3c>
	{
		PORTC |= (1 << GREEN);
  be:	88 b1       	in	r24, 0x08	; 8
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << YELLOW);
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	8f 7d       	andi	r24, 0xDF	; 223
  c8:	88 b9       	out	0x08, r24	; 8
		PORTB &= ~(1 << RED);
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	8f 7e       	andi	r24, 0xEF	; 239
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	27 c0       	rjmp	.+78     	; 0x120 <ledDisplay+0x8a>
	}
	
	else if (occPercent >= .40 && occPercent <= .80 ) // 40-80% capacity
  d2:	2d ec       	ldi	r18, 0xCD	; 205
  d4:	3c ec       	ldi	r19, 0xCC	; 204
  d6:	4c ec       	ldi	r20, 0xCC	; 204
  d8:	5e e3       	ldi	r21, 0x3E	; 62
  da:	c7 01       	movw	r24, r14
  dc:	b6 01       	movw	r22, r12
  de:	0e 94 87 03 	call	0x70e	; 0x70e <__gesf2>
  e2:	88 23       	and	r24, r24
  e4:	a4 f0       	brlt	.+40     	; 0x10e <ledDisplay+0x78>
  e6:	2d ec       	ldi	r18, 0xCD	; 205
  e8:	3c ec       	ldi	r19, 0xCC	; 204
  ea:	4c e4       	ldi	r20, 0x4C	; 76
  ec:	5f e3       	ldi	r21, 0x3F	; 63
  ee:	c7 01       	movw	r24, r14
  f0:	b6 01       	movw	r22, r12
  f2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__cmpsf2>
  f6:	18 16       	cp	r1, r24
  f8:	54 f0       	brlt	.+20     	; 0x10e <ledDisplay+0x78>
	{
		PORTC &= ~(1 << GREEN);
  fa:	88 b1       	in	r24, 0x08	; 8
  fc:	8f 7e       	andi	r24, 0xEF	; 239
  fe:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << YELLOW);
 100:	88 b1       	in	r24, 0x08	; 8
 102:	80 62       	ori	r24, 0x20	; 32
 104:	88 b9       	out	0x08, r24	; 8
		PORTB &= ~(1 << RED);
 106:	85 b1       	in	r24, 0x05	; 5
 108:	8f 7e       	andi	r24, 0xEF	; 239
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	09 c0       	rjmp	.+18     	; 0x120 <ledDisplay+0x8a>
		
	}
	
	else // >80
	{
		PORTC &= ~(1 << GREEN);
 10e:	88 b1       	in	r24, 0x08	; 8
 110:	8f 7e       	andi	r24, 0xEF	; 239
 112:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << YELLOW);
 114:	88 b1       	in	r24, 0x08	; 8
 116:	8f 7d       	andi	r24, 0xDF	; 223
 118:	88 b9       	out	0x08, r24	; 8
		PORTB |= (1 << RED);
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	85 b9       	out	0x05, r24	; 5
	}
}
 120:	ff 90       	pop	r15
 122:	ef 90       	pop	r14
 124:	df 90       	pop	r13
 126:	cf 90       	pop	r12
 128:	08 95       	ret

0000012a <triggerMotor>:

void triggerMotor(void)
{
	PORTB |= 1 << MOTOR; // turn motor on
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2a ea       	ldi	r18, 0xAA	; 170
 132:	36 ee       	ldi	r19, 0xE6	; 230
 134:	86 e9       	ldi	r24, 0x96	; 150
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	30 40       	sbci	r19, 0x00	; 0
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	d9 f7       	brne	.-10     	; 0x138 <triggerMotor+0xe>
 142:	00 00       	nop
	_delay_ms(10000);	 // on for 10 seconds
	PORTB &= 0 << MOTOR; // turn motor off
 144:	85 b1       	in	r24, 0x05	; 5
 146:	15 b8       	out	0x05, r1	; 5
 148:	08 95       	ret

0000014a <ultra_sonic_sensor1>:
}

float ultra_sonic_sensor1(void)
{
	// Trigger Pulse on pb1
	PORTB |= 1<< TRIGGER1;
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	85 e3       	ldi	r24, 0x35	; 53
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <ultra_sonic_sensor1+0x8>
 156:	00 00       	nop
	_delay_us(10);
	PORTB &= ~(1<< TRIGGER1);
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	8d 7f       	andi	r24, 0xFD	; 253
 15c:	85 b9       	out	0x05, r24	; 5

	// Grab time value
	uint16_t echorising = TCNT1;
 15e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 162:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	
	while ((PINB & (1<<PINB0))  ==  0); // Wait for echo high on pb0
 166:	18 9b       	sbis	0x03, 0	; 3
 168:	fe cf       	rjmp	.-4      	; 0x166 <ultra_sonic_sensor1+0x1c>
	while ((PINB & (1<<PINB0))  >  0);  // Wait for echo low on pb0
 16a:	18 99       	sbic	0x03, 0	; 3
 16c:	fe cf       	rjmp	.-4      	; 0x16a <ultra_sonic_sensor1+0x20>
	
	uint16_t echofalling = TCNT1; // Grab time value
 16e:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 172:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

	float usstime = (echofalling - echorising);
 176:	68 1b       	sub	r22, r24
 178:	79 0b       	sbc	r23, r25
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__floatunsisf>
	
	return usstime;
}
 182:	08 95       	ret

00000184 <ultra_sonic_sensor2>:

float ultra_sonic_sensor2(void)
{
	// Trigger Pulse on pb1
	PORTB |= 1<< TRIGGER2;
 184:	85 b1       	in	r24, 0x05	; 5
 186:	88 60       	ori	r24, 0x08	; 8
 188:	85 b9       	out	0x05, r24	; 5
 18a:	85 e3       	ldi	r24, 0x35	; 53
 18c:	8a 95       	dec	r24
 18e:	f1 f7       	brne	.-4      	; 0x18c <ultra_sonic_sensor2+0x8>
 190:	00 00       	nop
	_delay_us(10);
	PORTB &= ~(1<< TRIGGER2);
 192:	85 b1       	in	r24, 0x05	; 5
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	85 b9       	out	0x05, r24	; 5

	// Grab time value
	uint16_t echorising = TCNT1;
 198:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 19c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	
	while ((PINB & (1<<PINB2))  ==  0); // Wait for echo high on pb0
 1a0:	1a 9b       	sbis	0x03, 2	; 3
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <ultra_sonic_sensor2+0x1c>
	while ((PINB & (1<<PINB2))  >  0);  // Wait for echo low on pb0
 1a4:	1a 99       	sbic	0x03, 2	; 3
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <ultra_sonic_sensor2+0x20>
	
	uint16_t echofalling = TCNT1; // Grab time value
 1a8:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1ac:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

	float usstime = echofalling - echorising;
 1b0:	68 1b       	sub	r22, r24
 1b2:	79 0b       	sbc	r23, r25
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__floatunsisf>

	return usstime;
}
 1bc:	08 95       	ret

000001be <getDigits>:
		PORTC |= (1<<DIG4);
	}
}

void getDigits(unsigned int number, unsigned int* digits)
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	fc 01       	movw	r30, r24
 1c4:	eb 01       	movw	r28, r22
	digits[0] = (number/1000)%10; // thousands place
 1c6:	9c 01       	movw	r18, r24
 1c8:	36 95       	lsr	r19
 1ca:	27 95       	ror	r18
 1cc:	36 95       	lsr	r19
 1ce:	27 95       	ror	r18
 1d0:	36 95       	lsr	r19
 1d2:	27 95       	ror	r18
 1d4:	a5 ec       	ldi	r26, 0xC5	; 197
 1d6:	b0 e2       	ldi	r27, 0x20	; 32
 1d8:	0e 94 8c 03 	call	0x718	; 0x718 <__umulhisi3>
 1dc:	ac 01       	movw	r20, r24
 1de:	52 95       	swap	r21
 1e0:	42 95       	swap	r20
 1e2:	4f 70       	andi	r20, 0x0F	; 15
 1e4:	45 27       	eor	r20, r21
 1e6:	5f 70       	andi	r21, 0x0F	; 15
 1e8:	45 27       	eor	r20, r21
 1ea:	9a 01       	movw	r18, r20
 1ec:	ad ec       	ldi	r26, 0xCD	; 205
 1ee:	bc ec       	ldi	r27, 0xCC	; 204
 1f0:	0e 94 8c 03 	call	0x718	; 0x718 <__umulhisi3>
 1f4:	96 95       	lsr	r25
 1f6:	87 95       	ror	r24
 1f8:	96 95       	lsr	r25
 1fa:	87 95       	ror	r24
 1fc:	96 95       	lsr	r25
 1fe:	87 95       	ror	r24
 200:	9c 01       	movw	r18, r24
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	82 0f       	add	r24, r18
 214:	93 1f       	adc	r25, r19
 216:	9a 01       	movw	r18, r20
 218:	28 1b       	sub	r18, r24
 21a:	39 0b       	sbc	r19, r25
 21c:	39 83       	std	Y+1, r19	; 0x01
 21e:	28 83       	st	Y, r18
	digits[1] = (number/100)%10;  // hundreds place
 220:	9f 01       	movw	r18, r30
 222:	36 95       	lsr	r19
 224:	27 95       	ror	r18
 226:	36 95       	lsr	r19
 228:	27 95       	ror	r18
 22a:	ab e7       	ldi	r26, 0x7B	; 123
 22c:	b4 e1       	ldi	r27, 0x14	; 20
 22e:	0e 94 8c 03 	call	0x718	; 0x718 <__umulhisi3>
 232:	ac 01       	movw	r20, r24
 234:	56 95       	lsr	r21
 236:	47 95       	ror	r20
 238:	9a 01       	movw	r18, r20
 23a:	ad ec       	ldi	r26, 0xCD	; 205
 23c:	bc ec       	ldi	r27, 0xCC	; 204
 23e:	0e 94 8c 03 	call	0x718	; 0x718 <__umulhisi3>
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	9c 01       	movw	r18, r24
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	82 0f       	add	r24, r18
 262:	93 1f       	adc	r25, r19
 264:	9a 01       	movw	r18, r20
 266:	28 1b       	sub	r18, r24
 268:	39 0b       	sbc	r19, r25
 26a:	3b 83       	std	Y+3, r19	; 0x03
 26c:	2a 83       	std	Y+2, r18	; 0x02
	digits[2] = (number/10)%10;   // tens place
 26e:	9f 01       	movw	r18, r30
 270:	0e 94 8c 03 	call	0x718	; 0x718 <__umulhisi3>
 274:	ac 01       	movw	r20, r24
 276:	56 95       	lsr	r21
 278:	47 95       	ror	r20
 27a:	56 95       	lsr	r21
 27c:	47 95       	ror	r20
 27e:	56 95       	lsr	r21
 280:	47 95       	ror	r20
 282:	9a 01       	movw	r18, r20
 284:	0e 94 8c 03 	call	0x718	; 0x718 <__umulhisi3>
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	9c 01       	movw	r18, r24
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	82 0f       	add	r24, r18
 2a8:	93 1f       	adc	r25, r19
 2aa:	9a 01       	movw	r18, r20
 2ac:	28 1b       	sub	r18, r24
 2ae:	39 0b       	sbc	r19, r25
 2b0:	3d 83       	std	Y+5, r19	; 0x05
 2b2:	2c 83       	std	Y+4, r18	; 0x04
	digits[3] = (number%10);      // ones place
 2b4:	ca 01       	movw	r24, r20
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	44 0f       	add	r20, r20
 2bc:	55 1f       	adc	r21, r21
 2be:	44 0f       	add	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	48 0f       	add	r20, r24
 2c8:	59 1f       	adc	r21, r25
 2ca:	e4 1b       	sub	r30, r20
 2cc:	f5 0b       	sbc	r31, r21
 2ce:	ff 83       	std	Y+7, r31	; 0x07
 2d0:	ee 83       	std	Y+6, r30	; 0x06
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <displayCapacity>:

	return usstime;
}

void displayCapacity(unsigned int capacity, unsigned int* digits)
{
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	64 97       	sbiw	r28, 0x14	; 20
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
 2f0:	8b 01       	movw	r16, r22
	unsigned ledDigits[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67}; // 0 thru 9
 2f2:	24 e1       	ldi	r18, 0x14	; 20
 2f4:	e0 e0       	ldi	r30, 0x00	; 0
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	de 01       	movw	r26, r28
 2fa:	11 96       	adiw	r26, 0x01	; 1
 2fc:	01 90       	ld	r0, Z+
 2fe:	0d 92       	st	X+, r0
 300:	2a 95       	dec	r18
 302:	e1 f7       	brne	.-8      	; 0x2fc <displayCapacity+0x24>
	unsigned persistence = 2; // delay before displaying next digit
	
	getDigits(capacity, digits); // set digits into array
 304:	0e 94 df 00 	call	0x1be	; 0x1be <getDigits>

	unsigned char i = 0;
	unsigned char repeats = 100;
	
	for (i = 0; i<repeats; i++){
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	6b c0       	rjmp	.+214    	; 0x3e2 <displayCapacity+0x10a>
		// thousands digit
		PORTD = ledDigits[digits[0]];
 30c:	d8 01       	movw	r26, r16
 30e:	ed 91       	ld	r30, X+
 310:	fc 91       	ld	r31, X
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	2c 0f       	add	r18, r28
 31c:	3d 1f       	adc	r19, r29
 31e:	e2 0f       	add	r30, r18
 320:	f3 1f       	adc	r31, r19
 322:	80 81       	ld	r24, Z
 324:	8b b9       	out	0x0b, r24	; 11
		PORTC &= ~(1<<DIG1);
 326:	88 b1       	in	r24, 0x08	; 8
 328:	8e 7f       	andi	r24, 0xFE	; 254
 32a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32c:	af e3       	ldi	r26, 0x3F	; 63
 32e:	bf e1       	ldi	r27, 0x1F	; 31
 330:	11 97       	sbiw	r26, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <displayCapacity+0x58>
 334:	00 c0       	rjmp	.+0      	; 0x336 <displayCapacity+0x5e>
 336:	00 00       	nop
		_delay_ms(persistence);
		PORTC |= (1<<DIG1);
 338:	88 b1       	in	r24, 0x08	; 8
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	88 b9       	out	0x08, r24	; 8
		
		// hundred digit
		PORTD = ledDigits[digits[1]];
 33e:	d8 01       	movw	r26, r16
 340:	12 96       	adiw	r26, 0x02	; 2
 342:	ed 91       	ld	r30, X+
 344:	fc 91       	ld	r31, X
 346:	13 97       	sbiw	r26, 0x03	; 3
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	2c 0f       	add	r18, r28
 352:	3d 1f       	adc	r19, r29
 354:	e2 0f       	add	r30, r18
 356:	f3 1f       	adc	r31, r19
 358:	80 81       	ld	r24, Z
 35a:	8b b9       	out	0x0b, r24	; 11
		PORTC &= ~(1<<DIG2);
 35c:	88 b1       	in	r24, 0x08	; 8
 35e:	8d 7f       	andi	r24, 0xFD	; 253
 360:	88 b9       	out	0x08, r24	; 8
 362:	af e3       	ldi	r26, 0x3F	; 63
 364:	bf e1       	ldi	r27, 0x1F	; 31
 366:	11 97       	sbiw	r26, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <displayCapacity+0x8e>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <displayCapacity+0x94>
 36c:	00 00       	nop
		_delay_ms(persistence);
		PORTC |= (1<<DIG2);
 36e:	88 b1       	in	r24, 0x08	; 8
 370:	82 60       	ori	r24, 0x02	; 2
 372:	88 b9       	out	0x08, r24	; 8
		
		// tens digit
		PORTD = ledDigits[digits[2]];
 374:	d8 01       	movw	r26, r16
 376:	14 96       	adiw	r26, 0x04	; 4
 378:	ed 91       	ld	r30, X+
 37a:	fc 91       	ld	r31, X
 37c:	15 97       	sbiw	r26, 0x05	; 5
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	2c 0f       	add	r18, r28
 388:	3d 1f       	adc	r19, r29
 38a:	e2 0f       	add	r30, r18
 38c:	f3 1f       	adc	r31, r19
 38e:	80 81       	ld	r24, Z
 390:	8b b9       	out	0x0b, r24	; 11
		PORTC &= ~(1<<DIG3);
 392:	88 b1       	in	r24, 0x08	; 8
 394:	8b 7f       	andi	r24, 0xFB	; 251
 396:	88 b9       	out	0x08, r24	; 8
 398:	af e3       	ldi	r26, 0x3F	; 63
 39a:	bf e1       	ldi	r27, 0x1F	; 31
 39c:	11 97       	sbiw	r26, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <displayCapacity+0xc4>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <displayCapacity+0xca>
 3a2:	00 00       	nop
		_delay_ms(persistence);
		PORTC |= (1<<DIG3);
 3a4:	88 b1       	in	r24, 0x08	; 8
 3a6:	84 60       	ori	r24, 0x04	; 4
 3a8:	88 b9       	out	0x08, r24	; 8
		
		//ones digit
		PORTD = ledDigits[digits[3]];
 3aa:	d8 01       	movw	r26, r16
 3ac:	16 96       	adiw	r26, 0x06	; 6
 3ae:	ed 91       	ld	r30, X+
 3b0:	fc 91       	ld	r31, X
 3b2:	17 97       	sbiw	r26, 0x07	; 7
 3b4:	ee 0f       	add	r30, r30
 3b6:	ff 1f       	adc	r31, r31
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	2c 0f       	add	r18, r28
 3be:	3d 1f       	adc	r19, r29
 3c0:	e2 0f       	add	r30, r18
 3c2:	f3 1f       	adc	r31, r19
 3c4:	80 81       	ld	r24, Z
 3c6:	8b b9       	out	0x0b, r24	; 11
		PORTC &= ~(1<<DIG4);
 3c8:	88 b1       	in	r24, 0x08	; 8
 3ca:	87 7f       	andi	r24, 0xF7	; 247
 3cc:	88 b9       	out	0x08, r24	; 8
 3ce:	af e3       	ldi	r26, 0x3F	; 63
 3d0:	bf e1       	ldi	r27, 0x1F	; 31
 3d2:	11 97       	sbiw	r26, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <displayCapacity+0xfa>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <displayCapacity+0x100>
 3d8:	00 00       	nop
		_delay_ms(persistence);
		PORTC |= (1<<DIG4);
 3da:	88 b1       	in	r24, 0x08	; 8
 3dc:	88 60       	ori	r24, 0x08	; 8
 3de:	88 b9       	out	0x08, r24	; 8
	getDigits(capacity, digits); // set digits into array

	unsigned char i = 0;
	unsigned char repeats = 100;
	
	for (i = 0; i<repeats; i++){
 3e0:	9f 5f       	subi	r25, 0xFF	; 255
 3e2:	94 36       	cpi	r25, 0x64	; 100
 3e4:	08 f4       	brcc	.+2      	; 0x3e8 <displayCapacity+0x110>
 3e6:	92 cf       	rjmp	.-220    	; 0x30c <displayCapacity+0x34>
		PORTD = ledDigits[digits[3]];
		PORTC &= ~(1<<DIG4);
		_delay_ms(persistence);
		PORTC |= (1<<DIG4);
	}
}
 3e8:	64 96       	adiw	r28, 0x14	; 20
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	08 95       	ret

000003fe <main>:

float ultra_sonic_sensor1(void);
float ultra_sonic_sensor2(void);

int main(void)
{
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	28 97       	sbiw	r28, 0x08	; 8
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
	//LED pins
	DDRC |= (1<<YELLOW)|(1<<GREEN);
 412:	87 b1       	in	r24, 0x07	; 7
 414:	80 63       	ori	r24, 0x30	; 48
 416:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<RED);
 418:	84 b1       	in	r24, 0x04	; 4
 41a:	80 61       	ori	r24, 0x10	; 16
 41c:	84 b9       	out	0x04, r24	; 4
	
	// timer
	sei();
 41e:	78 94       	sei
	TCCR1B = (1<<CS12) | (1<<CS10); // 1024
 420:	85 e0       	ldi	r24, 0x05	; 5
 422:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1 = 0;
 426:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 42a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0; // timer mode - normal
 42e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	DDRB |= (1<<TRIGGER1) | (1<<TRIGGER2); // trigger outputs
 432:	84 b1       	in	r24, 0x04	; 4
 434:	8a 60       	ori	r24, 0x0A	; 10
 436:	84 b9       	out	0x04, r24	; 4

	//motor pins
	DDRB |= 1 << MOTOR;
 438:	84 b1       	in	r24, 0x04	; 4
 43a:	80 62       	ori	r24, 0x20	; 32
 43c:	84 b9       	out	0x04, r24	; 4
	
	//7 segment pins
	DDRD |= 0xFF; // turns on pins for 7 segment display "segments"
 43e:	8a b1       	in	r24, 0x0a	; 10
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<DIG1)|(1<<DIG2)|(1<<DIG3)|(1<<DIG4); // turns on pins for digits
 444:	87 b1       	in	r24, 0x07	; 7
 446:	8f 60       	ori	r24, 0x0F	; 15
 448:	87 b9       	out	0x07, r24	; 7

	unsigned int occupancy = 39;	// current occupancy
 44a:	07 e2       	ldi	r16, 0x27	; 39
 44c:	10 e0       	ldi	r17, 0x00	; 0
	float usstime = 0;
	float usstime2 = 0;
	
	while (1)
	{
		ledDisplay(occupancy);
 44e:	b8 01       	movw	r22, r16
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__floatunsisf>
 458:	0e 94 4b 00 	call	0x96	; 0x96 <ledDisplay>
		displayCapacity(occupancy, digits);
 45c:	be 01       	movw	r22, r28
 45e:	6f 5f       	subi	r22, 0xFF	; 255
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	c8 01       	movw	r24, r16
 464:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <displayCapacity>
		
		// check if entering from outside
		usstime = ultra_sonic_sensor1();
 468:	0e 94 a5 00 	call	0x14a	; 0x14a <ultra_sonic_sensor1>
		if (usstime < 150){
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	46 e1       	ldi	r20, 0x16	; 22
 472:	53 e4       	ldi	r21, 0x43	; 67
 474:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__cmpsf2>
 478:	88 23       	and	r24, r24
 47a:	24 f4       	brge	.+8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			triggerMotor();
 47c:	0e 94 95 00 	call	0x12a	; 0x12a <triggerMotor>
			occupancy++;
 480:	0f 5f       	subi	r16, 0xFF	; 255
 482:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		
		ledDisplay(occupancy);
 484:	b8 01       	movw	r22, r16
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__floatunsisf>
 48e:	0e 94 4b 00 	call	0x96	; 0x96 <ledDisplay>
		displayCapacity(occupancy, digits); // this total delay should be long enough
 492:	be 01       	movw	r22, r28
 494:	6f 5f       	subi	r22, 0xFF	; 255
 496:	7f 4f       	sbci	r23, 0xFF	; 255
 498:	c8 01       	movw	r24, r16
 49a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <displayCapacity>
		
		// check if entering from inside
		usstime2 = ultra_sonic_sensor2();
 49e:	0e 94 c2 00 	call	0x184	; 0x184 <ultra_sonic_sensor2>
		if (usstime2 < 110){
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	4c ed       	ldi	r20, 0xDC	; 220
 4a8:	52 e4       	ldi	r21, 0x42	; 66
 4aa:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__cmpsf2>
 4ae:	88 23       	and	r24, r24
 4b0:	74 f6       	brge	.-100    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			triggerMotor();
 4b2:	0e 94 95 00 	call	0x12a	; 0x12a <triggerMotor>
			occupancy--;
 4b6:	01 50       	subi	r16, 0x01	; 1
 4b8:	11 09       	sbc	r17, r1
 4ba:	c9 cf       	rjmp	.-110    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>

000004bc <__cmpsf2>:
 4bc:	0e 94 12 03 	call	0x624	; 0x624 <__fp_cmp>
 4c0:	08 f4       	brcc	.+2      	; 0x4c4 <__cmpsf2+0x8>
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	08 95       	ret

000004c6 <__divsf3>:
 4c6:	0e 94 77 02 	call	0x4ee	; 0x4ee <__divsf3x>
 4ca:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_round>
 4ce:	0e 94 46 03 	call	0x68c	; 0x68c <__fp_pscB>
 4d2:	58 f0       	brcs	.+22     	; 0x4ea <__divsf3+0x24>
 4d4:	0e 94 3f 03 	call	0x67e	; 0x67e <__fp_pscA>
 4d8:	40 f0       	brcs	.+16     	; 0x4ea <__divsf3+0x24>
 4da:	29 f4       	brne	.+10     	; 0x4e6 <__divsf3+0x20>
 4dc:	5f 3f       	cpi	r21, 0xFF	; 255
 4de:	29 f0       	breq	.+10     	; 0x4ea <__divsf3+0x24>
 4e0:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_inf>
 4e4:	51 11       	cpse	r21, r1
 4e6:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_szero>
 4ea:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_nan>

000004ee <__divsf3x>:
 4ee:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_split3>
 4f2:	68 f3       	brcs	.-38     	; 0x4ce <__divsf3+0x8>

000004f4 <__divsf3_pse>:
 4f4:	99 23       	and	r25, r25
 4f6:	b1 f3       	breq	.-20     	; 0x4e4 <__divsf3+0x1e>
 4f8:	55 23       	and	r21, r21
 4fa:	91 f3       	breq	.-28     	; 0x4e0 <__divsf3+0x1a>
 4fc:	95 1b       	sub	r25, r21
 4fe:	55 0b       	sbc	r21, r21
 500:	bb 27       	eor	r27, r27
 502:	aa 27       	eor	r26, r26
 504:	62 17       	cp	r22, r18
 506:	73 07       	cpc	r23, r19
 508:	84 07       	cpc	r24, r20
 50a:	38 f0       	brcs	.+14     	; 0x51a <__divsf3_pse+0x26>
 50c:	9f 5f       	subi	r25, 0xFF	; 255
 50e:	5f 4f       	sbci	r21, 0xFF	; 255
 510:	22 0f       	add	r18, r18
 512:	33 1f       	adc	r19, r19
 514:	44 1f       	adc	r20, r20
 516:	aa 1f       	adc	r26, r26
 518:	a9 f3       	breq	.-22     	; 0x504 <__divsf3_pse+0x10>
 51a:	35 d0       	rcall	.+106    	; 0x586 <__divsf3_pse+0x92>
 51c:	0e 2e       	mov	r0, r30
 51e:	3a f0       	brmi	.+14     	; 0x52e <__divsf3_pse+0x3a>
 520:	e0 e8       	ldi	r30, 0x80	; 128
 522:	32 d0       	rcall	.+100    	; 0x588 <__divsf3_pse+0x94>
 524:	91 50       	subi	r25, 0x01	; 1
 526:	50 40       	sbci	r21, 0x00	; 0
 528:	e6 95       	lsr	r30
 52a:	00 1c       	adc	r0, r0
 52c:	ca f7       	brpl	.-14     	; 0x520 <__divsf3_pse+0x2c>
 52e:	2b d0       	rcall	.+86     	; 0x586 <__divsf3_pse+0x92>
 530:	fe 2f       	mov	r31, r30
 532:	29 d0       	rcall	.+82     	; 0x586 <__divsf3_pse+0x92>
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	88 1f       	adc	r24, r24
 53a:	bb 1f       	adc	r27, r27
 53c:	26 17       	cp	r18, r22
 53e:	37 07       	cpc	r19, r23
 540:	48 07       	cpc	r20, r24
 542:	ab 07       	cpc	r26, r27
 544:	b0 e8       	ldi	r27, 0x80	; 128
 546:	09 f0       	breq	.+2      	; 0x54a <__divsf3_pse+0x56>
 548:	bb 0b       	sbc	r27, r27
 54a:	80 2d       	mov	r24, r0
 54c:	bf 01       	movw	r22, r30
 54e:	ff 27       	eor	r31, r31
 550:	93 58       	subi	r25, 0x83	; 131
 552:	5f 4f       	sbci	r21, 0xFF	; 255
 554:	3a f0       	brmi	.+14     	; 0x564 <__divsf3_pse+0x70>
 556:	9e 3f       	cpi	r25, 0xFE	; 254
 558:	51 05       	cpc	r21, r1
 55a:	78 f0       	brcs	.+30     	; 0x57a <__divsf3_pse+0x86>
 55c:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_inf>
 560:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_szero>
 564:	5f 3f       	cpi	r21, 0xFF	; 255
 566:	e4 f3       	brlt	.-8      	; 0x560 <__divsf3_pse+0x6c>
 568:	98 3e       	cpi	r25, 0xE8	; 232
 56a:	d4 f3       	brlt	.-12     	; 0x560 <__divsf3_pse+0x6c>
 56c:	86 95       	lsr	r24
 56e:	77 95       	ror	r23
 570:	67 95       	ror	r22
 572:	b7 95       	ror	r27
 574:	f7 95       	ror	r31
 576:	9f 5f       	subi	r25, 0xFF	; 255
 578:	c9 f7       	brne	.-14     	; 0x56c <__divsf3_pse+0x78>
 57a:	88 0f       	add	r24, r24
 57c:	91 1d       	adc	r25, r1
 57e:	96 95       	lsr	r25
 580:	87 95       	ror	r24
 582:	97 f9       	bld	r25, 7
 584:	08 95       	ret
 586:	e1 e0       	ldi	r30, 0x01	; 1
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	bb 1f       	adc	r27, r27
 590:	62 17       	cp	r22, r18
 592:	73 07       	cpc	r23, r19
 594:	84 07       	cpc	r24, r20
 596:	ba 07       	cpc	r27, r26
 598:	20 f0       	brcs	.+8      	; 0x5a2 <__divsf3_pse+0xae>
 59a:	62 1b       	sub	r22, r18
 59c:	73 0b       	sbc	r23, r19
 59e:	84 0b       	sbc	r24, r20
 5a0:	ba 0b       	sbc	r27, r26
 5a2:	ee 1f       	adc	r30, r30
 5a4:	88 f7       	brcc	.-30     	; 0x588 <__divsf3_pse+0x94>
 5a6:	e0 95       	com	r30
 5a8:	08 95       	ret

000005aa <__floatunsisf>:
 5aa:	e8 94       	clt
 5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <__floatsisf+0x12>

000005ae <__floatsisf>:
 5ae:	97 fb       	bst	r25, 7
 5b0:	3e f4       	brtc	.+14     	; 0x5c0 <__floatsisf+0x12>
 5b2:	90 95       	com	r25
 5b4:	80 95       	com	r24
 5b6:	70 95       	com	r23
 5b8:	61 95       	neg	r22
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	8f 4f       	sbci	r24, 0xFF	; 255
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	99 23       	and	r25, r25
 5c2:	a9 f0       	breq	.+42     	; 0x5ee <__floatsisf+0x40>
 5c4:	f9 2f       	mov	r31, r25
 5c6:	96 e9       	ldi	r25, 0x96	; 150
 5c8:	bb 27       	eor	r27, r27
 5ca:	93 95       	inc	r25
 5cc:	f6 95       	lsr	r31
 5ce:	87 95       	ror	r24
 5d0:	77 95       	ror	r23
 5d2:	67 95       	ror	r22
 5d4:	b7 95       	ror	r27
 5d6:	f1 11       	cpse	r31, r1
 5d8:	f8 cf       	rjmp	.-16     	; 0x5ca <__floatsisf+0x1c>
 5da:	fa f4       	brpl	.+62     	; 0x61a <__floatsisf+0x6c>
 5dc:	bb 0f       	add	r27, r27
 5de:	11 f4       	brne	.+4      	; 0x5e4 <__floatsisf+0x36>
 5e0:	60 ff       	sbrs	r22, 0
 5e2:	1b c0       	rjmp	.+54     	; 0x61a <__floatsisf+0x6c>
 5e4:	6f 5f       	subi	r22, 0xFF	; 255
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ea:	9f 4f       	sbci	r25, 0xFF	; 255
 5ec:	16 c0       	rjmp	.+44     	; 0x61a <__floatsisf+0x6c>
 5ee:	88 23       	and	r24, r24
 5f0:	11 f0       	breq	.+4      	; 0x5f6 <__floatsisf+0x48>
 5f2:	96 e9       	ldi	r25, 0x96	; 150
 5f4:	11 c0       	rjmp	.+34     	; 0x618 <__floatsisf+0x6a>
 5f6:	77 23       	and	r23, r23
 5f8:	21 f0       	breq	.+8      	; 0x602 <__floatsisf+0x54>
 5fa:	9e e8       	ldi	r25, 0x8E	; 142
 5fc:	87 2f       	mov	r24, r23
 5fe:	76 2f       	mov	r23, r22
 600:	05 c0       	rjmp	.+10     	; 0x60c <__floatsisf+0x5e>
 602:	66 23       	and	r22, r22
 604:	71 f0       	breq	.+28     	; 0x622 <__floatsisf+0x74>
 606:	96 e8       	ldi	r25, 0x86	; 134
 608:	86 2f       	mov	r24, r22
 60a:	70 e0       	ldi	r23, 0x00	; 0
 60c:	60 e0       	ldi	r22, 0x00	; 0
 60e:	2a f0       	brmi	.+10     	; 0x61a <__floatsisf+0x6c>
 610:	9a 95       	dec	r25
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	88 1f       	adc	r24, r24
 618:	da f7       	brpl	.-10     	; 0x610 <__floatsisf+0x62>
 61a:	88 0f       	add	r24, r24
 61c:	96 95       	lsr	r25
 61e:	87 95       	ror	r24
 620:	97 f9       	bld	r25, 7
 622:	08 95       	ret

00000624 <__fp_cmp>:
 624:	99 0f       	add	r25, r25
 626:	00 08       	sbc	r0, r0
 628:	55 0f       	add	r21, r21
 62a:	aa 0b       	sbc	r26, r26
 62c:	e0 e8       	ldi	r30, 0x80	; 128
 62e:	fe ef       	ldi	r31, 0xFE	; 254
 630:	16 16       	cp	r1, r22
 632:	17 06       	cpc	r1, r23
 634:	e8 07       	cpc	r30, r24
 636:	f9 07       	cpc	r31, r25
 638:	c0 f0       	brcs	.+48     	; 0x66a <__fp_cmp+0x46>
 63a:	12 16       	cp	r1, r18
 63c:	13 06       	cpc	r1, r19
 63e:	e4 07       	cpc	r30, r20
 640:	f5 07       	cpc	r31, r21
 642:	98 f0       	brcs	.+38     	; 0x66a <__fp_cmp+0x46>
 644:	62 1b       	sub	r22, r18
 646:	73 0b       	sbc	r23, r19
 648:	84 0b       	sbc	r24, r20
 64a:	95 0b       	sbc	r25, r21
 64c:	39 f4       	brne	.+14     	; 0x65c <__fp_cmp+0x38>
 64e:	0a 26       	eor	r0, r26
 650:	61 f0       	breq	.+24     	; 0x66a <__fp_cmp+0x46>
 652:	23 2b       	or	r18, r19
 654:	24 2b       	or	r18, r20
 656:	25 2b       	or	r18, r21
 658:	21 f4       	brne	.+8      	; 0x662 <__fp_cmp+0x3e>
 65a:	08 95       	ret
 65c:	0a 26       	eor	r0, r26
 65e:	09 f4       	brne	.+2      	; 0x662 <__fp_cmp+0x3e>
 660:	a1 40       	sbci	r26, 0x01	; 1
 662:	a6 95       	lsr	r26
 664:	8f ef       	ldi	r24, 0xFF	; 255
 666:	81 1d       	adc	r24, r1
 668:	81 1d       	adc	r24, r1
 66a:	08 95       	ret

0000066c <__fp_inf>:
 66c:	97 f9       	bld	r25, 7
 66e:	9f 67       	ori	r25, 0x7F	; 127
 670:	80 e8       	ldi	r24, 0x80	; 128
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	08 95       	ret

00000678 <__fp_nan>:
 678:	9f ef       	ldi	r25, 0xFF	; 255
 67a:	80 ec       	ldi	r24, 0xC0	; 192
 67c:	08 95       	ret

0000067e <__fp_pscA>:
 67e:	00 24       	eor	r0, r0
 680:	0a 94       	dec	r0
 682:	16 16       	cp	r1, r22
 684:	17 06       	cpc	r1, r23
 686:	18 06       	cpc	r1, r24
 688:	09 06       	cpc	r0, r25
 68a:	08 95       	ret

0000068c <__fp_pscB>:
 68c:	00 24       	eor	r0, r0
 68e:	0a 94       	dec	r0
 690:	12 16       	cp	r1, r18
 692:	13 06       	cpc	r1, r19
 694:	14 06       	cpc	r1, r20
 696:	05 06       	cpc	r0, r21
 698:	08 95       	ret

0000069a <__fp_round>:
 69a:	09 2e       	mov	r0, r25
 69c:	03 94       	inc	r0
 69e:	00 0c       	add	r0, r0
 6a0:	11 f4       	brne	.+4      	; 0x6a6 <__fp_round+0xc>
 6a2:	88 23       	and	r24, r24
 6a4:	52 f0       	brmi	.+20     	; 0x6ba <__fp_round+0x20>
 6a6:	bb 0f       	add	r27, r27
 6a8:	40 f4       	brcc	.+16     	; 0x6ba <__fp_round+0x20>
 6aa:	bf 2b       	or	r27, r31
 6ac:	11 f4       	brne	.+4      	; 0x6b2 <__fp_round+0x18>
 6ae:	60 ff       	sbrs	r22, 0
 6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__fp_round+0x20>
 6b2:	6f 5f       	subi	r22, 0xFF	; 255
 6b4:	7f 4f       	sbci	r23, 0xFF	; 255
 6b6:	8f 4f       	sbci	r24, 0xFF	; 255
 6b8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ba:	08 95       	ret

000006bc <__fp_split3>:
 6bc:	57 fd       	sbrc	r21, 7
 6be:	90 58       	subi	r25, 0x80	; 128
 6c0:	44 0f       	add	r20, r20
 6c2:	55 1f       	adc	r21, r21
 6c4:	59 f0       	breq	.+22     	; 0x6dc <__fp_splitA+0x10>
 6c6:	5f 3f       	cpi	r21, 0xFF	; 255
 6c8:	71 f0       	breq	.+28     	; 0x6e6 <__fp_splitA+0x1a>
 6ca:	47 95       	ror	r20

000006cc <__fp_splitA>:
 6cc:	88 0f       	add	r24, r24
 6ce:	97 fb       	bst	r25, 7
 6d0:	99 1f       	adc	r25, r25
 6d2:	61 f0       	breq	.+24     	; 0x6ec <__fp_splitA+0x20>
 6d4:	9f 3f       	cpi	r25, 0xFF	; 255
 6d6:	79 f0       	breq	.+30     	; 0x6f6 <__fp_splitA+0x2a>
 6d8:	87 95       	ror	r24
 6da:	08 95       	ret
 6dc:	12 16       	cp	r1, r18
 6de:	13 06       	cpc	r1, r19
 6e0:	14 06       	cpc	r1, r20
 6e2:	55 1f       	adc	r21, r21
 6e4:	f2 cf       	rjmp	.-28     	; 0x6ca <__fp_split3+0xe>
 6e6:	46 95       	lsr	r20
 6e8:	f1 df       	rcall	.-30     	; 0x6cc <__fp_splitA>
 6ea:	08 c0       	rjmp	.+16     	; 0x6fc <__fp_splitA+0x30>
 6ec:	16 16       	cp	r1, r22
 6ee:	17 06       	cpc	r1, r23
 6f0:	18 06       	cpc	r1, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	f1 cf       	rjmp	.-30     	; 0x6d8 <__fp_splitA+0xc>
 6f6:	86 95       	lsr	r24
 6f8:	71 05       	cpc	r23, r1
 6fa:	61 05       	cpc	r22, r1
 6fc:	08 94       	sec
 6fe:	08 95       	ret

00000700 <__fp_zero>:
 700:	e8 94       	clt

00000702 <__fp_szero>:
 702:	bb 27       	eor	r27, r27
 704:	66 27       	eor	r22, r22
 706:	77 27       	eor	r23, r23
 708:	cb 01       	movw	r24, r22
 70a:	97 f9       	bld	r25, 7
 70c:	08 95       	ret

0000070e <__gesf2>:
 70e:	0e 94 12 03 	call	0x624	; 0x624 <__fp_cmp>
 712:	08 f4       	brcc	.+2      	; 0x716 <__gesf2+0x8>
 714:	8f ef       	ldi	r24, 0xFF	; 255
 716:	08 95       	ret

00000718 <__umulhisi3>:
 718:	a2 9f       	mul	r26, r18
 71a:	b0 01       	movw	r22, r0
 71c:	b3 9f       	mul	r27, r19
 71e:	c0 01       	movw	r24, r0
 720:	a3 9f       	mul	r26, r19
 722:	70 0d       	add	r23, r0
 724:	81 1d       	adc	r24, r1
 726:	11 24       	eor	r1, r1
 728:	91 1d       	adc	r25, r1
 72a:	b2 9f       	mul	r27, r18
 72c:	70 0d       	add	r23, r0
 72e:	81 1d       	adc	r24, r1
 730:	11 24       	eor	r1, r1
 732:	91 1d       	adc	r25, r1
 734:	08 95       	ret

00000736 <_exit>:
 736:	f8 94       	cli

00000738 <__stop_program>:
 738:	ff cf       	rjmp	.-2      	; 0x738 <__stop_program>
